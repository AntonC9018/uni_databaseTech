using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Data;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Windows;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using Lab1.DataLayer;
using Microsoft.Data.SqlClient;
using Microsoft.Toolkit.Mvvm.ComponentModel;

namespace Laborator1;

public sealed class MainMenuModel : ObservableObject
{
    public

}

public sealed partial class RowModel : ObservableObject
{
    public ColumnModel Schema;

    [ObservableProperty]
    private readonly string _value;
}

public sealed class TableSchemaViewModel
{
    public string Name { get; }
    public ColumnModel[] Columns { get; set; }
    public IEnumerable<ColumnModel> IdColumns => Columns.Where(c => c.IsId);
    public string Schema { get; set; }
}

public sealed partial class RowViewModel : ObservableObject
{
    public RowViewModel(RowModel model) => _model = model;

    [ObservableProperty]
    [NotifyPropertyChangedFor(nameof(Name))]
    [NotifyPropertyChangedFor(nameof(Value))]
    [NotifyPropertyChangedFor(nameof(IsReadOnly))]
    private readonly RowModel _model;

    public string Name => Model.Schema.Name;

    public string Value
    {
        get => Model.Value;
        set => Model.Value = value;
    }

    public bool IsReadOnly => Model.Schema.IsAutoGenerated;
}

public sealed partial class MainMenuViewModel : ObservableObject
{
    public MainMenuViewModel(TableSchemaViewModel[] tableModels)
    {
        _tableModels = tableModels;
    }

    private readonly TableSchemaViewModel[] _tableModels;
    private readonly ObservableCollection<RowViewModel> _rows = new();

    [ObservableProperty]
    private int? _currentTableSchemaIndex = null;

    [ObservableProperty]
    [NotifyPropertyChangedFor(nameof(IsTableSelected))]
    private int? _currentTableRowIndex = null;

    [ObservableProperty]
    [NotifyPropertyChangedFor(nameof(CanMoveNextRow))]
    private bool _isFirstRow = true;

    [ObservableProperty]
    [NotifyPropertyChangedFor(nameof(CanMovePreviousRow))]
    private bool _isLastRow = true;

    public IEnumerable<TableSchemaViewModel> TableSchemas => _tableModels;

    [ObservableProperty]
    private bool _isLoading;
    private CancellationToken _loadingCancellationToken;
    private CancellationTokenSource _cts;
    private SemaphoreSlim _loadingOperationLock = new SemaphoreSlim(1, 1);

    public bool CanMovePreviousRow => !IsFirstRow && !IsLoading;
    public bool CanMoveNextRow => !IsFirstRow && !IsLoading;
    public bool IsTableSelected => CurrentTableSchemaIndex is not null;


    [RelayCommand]
    public void MovePreviousRow()
    {
        if (!CanMovePreviousRow)
            return;
    }

    private static async Task MovePreviousRow(
        SqlConnection connection,
        MainMenuViewModel model)
    {
        int? maybeSchemaIndex = model.CurrentTableSchemaIndex;
        Debug.Assert(maybeSchemaIndex is not null);
        int schemaIndex = maybeSchemaIndex.Value;

        int? maybeCurrentRowIndex = model.CurrentTableRowIndex;
        Debug.Assert(maybeCurrentRowIndex is not null);
        int currentRowIndex = maybeCurrentRowIndex.Value;

        var table = model._tableModels[schemaIndex];
        var command = connection.CreateCommand();
        var stringBuilder = new StringBuilder();
        GetRowAtIndexQuery(stringBuilder, table);
        command.CommandText = stringBuilder.ToString();
        var currentIndexParameter = new SqlParameter(CurrentIndexParameterName, SqlDbType.Int);
        currentIndexParameter.Value = (object) currentRowIndex;
        command.Parameters.Add(currentIndexParameter);

        var reader = await command.ExecuteReaderAsync();


    }

    const string CurrentIndexParameterName = "currentIndex";

    public static void GetRowAtIndexQuery(
        StringBuilder sb,
        TableSchemaViewModel tableSchema)
    {
        sb.Append("""
        SELECT TOP(1) FROM (
            SELECT 
                t.*, 
                row_number() over (partition by
        """);
        AppendIdPropertiesAsList();
        sb.Append(") as rowNumberXXX");
        sb.AppendLine($"""
            FROM {tableSchema.Schema}.[{tableSchema.Name}] AS t
            ORDER BY
        """);
        AppendIdPropertiesAsList();
        sb.Append($"""
        ) AS t1           
        WHERE t1.rowNumberXXX >= @{CurrentIndexParameterName}
        """);

        void AppendIdPropertiesAsList()
        {
            bool isFirstAppend = true;
            foreach (var columnSchema in tableSchema.IdColumns)
            {
                if (!isFirstAppend)
                {
                    sb.Append(", ");
                }
                else
                {
                    isFirstAppend = true;
                }
                sb.Append($"t.[{columnSchema.Name}]");
            }
        }
    }



    [RelayCommand]
    public void MoveNextRow()
    {

    }
}

public sealed partial class MainMenu : Window
{

}