using System.Linq;
using System.Text;
using Laborator1;

namespace Lab1.DataLayer;

public static class QueryBuilderHelper
{
    public const string CurrentIndexParameterName = "currentIndex";
    public const string ValueVariablePrefix = "v";

    public static void GetRowAtIndexQuery(
        StringBuilder sb,
        TableSchemaViewModel tableSchema)
    {
        var propertiesList = new JoinableDbPropertyList(tableSchema.Columns.Select(c => c.Name));
        var idPropertiesList = new JoinableDbPropertyList(tableSchema.IdColumns.Select(c => c.Name));

        using var t1Props = propertiesList.Prefix("t1");
        using var tProps = idPropertiesList.Prefix("t");
        using var t2Props = idPropertiesList.Prefix("t2");

        sb.Append($"""
        SELECT TOP(1) FROM
        (
            SELECT {t1Props} FROM
            (
                SELECT
                    t.*,
                    ROW_NUMBER() OVER (
                        PARTITION BY {tProps}) AS rowNumberX
                FROM {tableSchema.FullyQualifiedName} AS t
            ) AS t1
            WHERE t1.rowNumberX <= @{CurrentIndexParameterName}
        ) AS t2
        ORDER BY {t2Props}
        """);
    }
    
    public static void GetDeleteRowWithKeyQuery(
        StringBuilder sb,
        TableSchemaViewModel tableSchema)
    {
        var equalValueList = tableSchema.IdColumns
            .Select(x => new FullyQualifiedName("t", x.Name))
            .EqualValueList(i => new )
        sb.Append($"""
        DELETE FROM {tableSchema.FullyQualifiedName} AS t
        WHERE 
        """);

        int currentIndex = 0;
        using var e = tableSchema.IdColumns.GetEnumerator();
        if (!e.MoveNext())
            throw new InvalidOperationException();

        void AppendPropertyEquals()
        {
            sb.Append($"t.[{e.Current}] = @{ValueVariablePrefix}{currentIndex}")
            currentIndex++;
        }

        AppendPropertyEquals();
        while (e.MoveNext())
        {
            sb.Append(" AND ")
            AppendPropertyEquals();
        }
    }

    public static void GetInsertRowWithValuesQuery(
        StringBuilder sb,
        TableSchemaViewModel tableSchema)
    {
        var notAutogeneratedColumns = tableSchema.Columns.Select(c => !c.IsAutoGenerated);

        sb.Append($"""
        INSERT INTO {tableSchema.FullyQualifiedName} AS t(
        """);

        void AppendNames()
        {
            using var e = notAutogeneratedColumns.GetEnumerator();
            bool moved = e.MoveNext();
            if (!moved)
                return;

            sb.Append(e.Name);
            while (e.MoveNext())
            {
                sb.Append(", ");
                sb.Append(e.Name);
            }
        }
        AppendNames();

        sb.Append(")");
        sb.AppendLine("VALUES");
        sb.Append("(")

        int count = notAutogeneratedColumns.Count();
        if (count != 0)
        {
            sb.Append($"@{ValueVariablePrefix}0");
        }
        for (int i = 1; i < count; i++)
        {
            sb.Append(", ");
            sb.Append($"@{ValueVariablePrefix}{i}");
        }

        sb.Append(")");
    }

    public static void GetUpdateRowQuery(
        StringBuilder sb,
        TableSchemaViewModel tableSchema)
    {
        sb.Append($"""
        UPDATE {tableSchema.FullyQualifiedName}
        SET
        """);

        int currentIndex = 0;


    }
}